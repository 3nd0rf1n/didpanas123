import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, ContextTypes,
    ConversationHandler, MessageHandler, filters,
    CallbackQueryHandler
)
from pymongo import MongoClient
from datetime import datetime, timedelta
import random
import asyncio
from telegram.constants import ParseMode
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
from telegram.error import RetryAfter, TelegramError
import re
import os
from telegram.helpers import escape_markdown


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

mongo_url = os.getenv("MONGO_URL", "mongodb://localhost:27017") 
client = MongoClient(mongo_url)
db = client["didpanas"]
users = db["panas_users"]

BET = 0
SLOTS_BET = 1
MULTIPLAYER_BET = 2


def calculate_level(games_played):
    if games_played < 10:
        return 1
    elif games_played < 30:
        return 2
    elif games_played < 60:
        return 3
    elif games_played < 100:
        return 4
    else:
        return 5

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username

    user = users.find_one({"user_id": user_id})
    welcome_text = (
        "üëã *–í—ñ—Ç–∞—î–º–æ, –ª—é–±–∏–π –≥—Ä–∞–≤—Ü—é!*\n\n"
        "üéâ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ *¬´–î—ñ–¥ –ü–∞–Ω–∞—Å¬ª* ‚Äî –º—ñ—Å—Ü—è, –¥–µ –∞–∑–∞—Ä—Ç –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è –∑ –≤–µ—Å–µ–ª–æ—â–∞–º–∏!\n\n"
        "üíª *–û—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç:* [didpanas.netlify.app](https://didpanas.netlify.app)\n\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "üïπÔ∏è *–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –≥—Ä–∏:*\n"
        "‚ñ´Ô∏è /coin ‚Äî –ø–æ–≥—Ä–∞—Ç–∏ –≤ –º–æ–Ω–µ—Ç–∫—É (—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ *10* –¥–æ *1000* –º–æ–Ω–µ—Ç)\n"
        "‚ñ´Ô∏è /slots ‚Äî –ø–æ–≥—Ä–∞—Ç–∏ –≤ —Å–ª–æ—Ç–∏\n"
        "‚ñ´Ô∏è /balance ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤—ñ–π –±–∞–ª–∞–Ω—Å\n"
        "‚ñ´Ô∏è /daily ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å\n"
        "‚ñ´Ô∏è /profile ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å —ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è\n"
        "‚ñ´Ô∏è /shop ‚Äî –º–∞–≥–∞–∑–∏–Ω —Ñ—ñ—á –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é\n\n"
        "‚ñ´Ô∏è /pay ‚Äî –ø–µ—Ä–µ–¥–∞—Ç–∏ —Å–≤–æ—ó –≥—Ä–æ—à–∏–∫–∏\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "_–ü—Ä–æ–∫–∏–¥–∞–π —É–¥–∞—á—É, –≥—Ä–∞–π —á–µ—Å–Ω–æ —ñ –∑–±–∏—Ä–∞–π –≤–∏–≥—Ä–∞—à—ñ!_\n"
        "üí∞ *–ë–∞–∂–∞—î–º–æ –≤–µ–ª–∏–∫–∏—Ö –ø—Ä–∏–∑—ñ–≤!* üçÄ"
    )

    if not user:
        users.insert_one({
            "user_id": user_id,
            "username": username,
            "balance": 100,
            "last_daily": None,
            "wins": 0,
            "losses": 0,
            "games_played": 0,
            "win_streak": 0,
            "max_win_streak": 0,
            "total_winnings": 0,
            "level": 1,
            "achievements": [],
            "purchased_features": []
        })
        await update.message.reply_markdown(welcome_text)
    else:
        await update.message.reply_markdown("üëã –ó–Ω–æ–≤—É —Ä–∞–¥–∏–π —Ç–µ–±–µ –±–∞—á–∏—Ç–∏!\n\n" + welcome_text)

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = users.find_one({"user_id": user_id})

    if user:
        await update.message.reply_text(
            f"üí∞ –ù–∞ —Ç–≤–æ—î–º—É —Ä–∞—Ö—É–Ω–∫—É –∑–∞—Ä–∞–∑ {user['balance']} –º–æ–Ω–µ—Ç.\n"
            "–ì–æ—Ç—É–π—Å—è —Ä–æ–±–∏—Ç–∏ —Å—Ç–∞–≤–∫–∏ —Ç–∞ –≤–∏–≥—Ä–∞–≤–∞—Ç–∏!"
        )
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –í–∏–≥–ª—è–¥–∞—î, —â–æ —Ç–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ.\n\n"
            "–©–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start.\n"
            "–¶–µ –∑–∞–π–º–µ –ª–∏—à–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥, —ñ —Ç–æ–¥—ñ —Ç–∏ –∑–º–æ–∂–µ—à –≥—Ä–∞—Ç–∏ —Ç–∞ –≤–∏–≥—Ä–∞–≤–∞—Ç–∏ –º–æ–Ω–µ—Ç–∏! üçÄ")

    keyboard = []
    for item in shop_items_vip:
        keyboard.append([InlineKeyboardButton(f"{item['name']} ‚Äî {item['price']} –º–æ–Ω–µ—Ç", callback_data=f"buy_{item['id']}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üõí –ú–∞–≥–∞–∑–∏–Ω —Ñ—ñ—á –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é. –í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏:", reply_markup=reply_markup)

async def buy_feature(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user = users.find_one({"user_id": user_id})
    if not user:
        await query.edit_message_text("‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞–ø–∏—à—ñ—Ç—å /start")
        return

    feature_id = query.data.replace("buy_", "")
    item = next((i for i in shop_items_vip if i["id"] == feature_id), None)
    if not item:
        await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    purchased = user.get("purchased_features", [])

    if feature_id in purchased:
        await query.edit_message_text("‚úÖ –í–∏ –≤–∂–µ –∫—É–ø–∏–ª–∏ —Ü—é —Ñ—ñ—á—É.")
        return

    if user["balance"] < item["price"]:
        await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return

    users.update_one(
        {"user_id": user_id},
        {
            "$inc": {"balance": -item["price"]},
            "$push": {"purchased_features": feature_id}
        }
    )
    await query.edit_message_text(f"üéâ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∫—É–ø–∏–ª–∏: {item['name']}")

async def coin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = users.find_one({"user_id": user_id})

    if not user:
        await update.message.reply_text(
            "‚ö†Ô∏è –í–∏–≥–ª—è–¥–∞—î, —â–æ —Ç–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ.\n\n"
            "–©–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start.\n"
            "–¶–µ –∑–∞–π–º–µ –ª–∏—à–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥, —ñ —Ç–æ–¥—ñ —Ç–∏ –∑–º–æ–∂–µ—à –≥—Ä–∞—Ç–∏ —Ç–∞ –≤–∏–≥—Ä–∞–≤–∞—Ç–∏ –º–æ–Ω–µ—Ç–∏! üçÄ")
        return ConversationHandler.END

    await update.message.reply_text(
        f"ü™ô –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≥—Ä–∏ '–û—Ä–µ–ª —á–∏ –†–µ—à–∫–∞'!\n\n"
        f"üí∞ –£ —Ç–≤–æ—î–º—É –≥–∞–º–∞–Ω—Ü—ñ –∑–∞—Ä–∞–∑: {user['balance']} –º–æ–Ω–µ—Ç.\n"
        "üé≤ –í–≤–µ–¥–∏ —Å—É–º—É —Å—Ç–∞–≤–∫–∏ (—Ç—ñ–ª—å–∫–∏ —Ü—ñ–ª–µ —á–∏—Å–ª–æ), —ñ –º–∏ –∫–∏–Ω–µ–º–æ –º–æ–Ω–µ—Ç—É –∑–∞ —Ç–µ–±–µ.\n\n"
        "–ë—É–¥—å –≥–æ—Ç–æ–≤–∏–π ‚Äî —É–¥–∞—á–∞ –º–æ–∂–µ –±—É—Ç–∏ –Ω–∞ —Ç–≤–æ—î–º—É –±–æ—Ü—ñ –∞–±–æ –∂ –æ–±–µ—Ä–Ω—É—Ç–∏—Å—è –ø—Ä–æ—Ç–∏!\n"
        "–ì–æ—Ç–æ–≤–∏–π —Ä–∏–∑–∏–∫–Ω—É—Ç–∏ —ñ –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –í–≤–µ–¥–∏ —Å—É–º—É, —ñ —Ö–∞–π —â–∞—Å—Ç–∏—Ç—å!\n\n"
        "‚èπ –Ø–∫—â–æ —Ö–æ—á–µ—à —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≥—Ä—É ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /cancel."
    )
    return BET

async def coin_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = users.find_one({"user_id": user_id})
    text = update.message.text

    if not text.isdigit():
        await update.message.reply_text(
            "‚ùå –£–ø—Å! –í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, **–∫–æ—Ä–µ–∫—Ç–Ω–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ** –¥–ª—è —Å—Ç–∞–≤–∫–∏.\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 50 –∞–±–æ 100."
        )
        return BET

    bet = int(text)

    if bet < 10:
        await update.message.reply_text(
            "‚ö†Ô∏è –°—Ç–∞–≤–∫–∞ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞! –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞ ‚Äî **10 –º–æ–Ω–µ—Ç**.\n"
            "–°–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à—É —Å—É–º—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–∞–Ω—Å –Ω–∞ –≤–∏–≥—Ä–∞—à!"
        )
        return BET

    if bet > 1000:
        await update.message.reply_text(
            "‚ö†Ô∏è –û–≥–æ, —Ü–µ –∑–∞–±–∞–≥–∞—Ç–æ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞ ‚Äî **1000 –º–æ–Ω–µ—Ç**.\n"
            "–ù–µ –≤–∞—Ä—Ç–æ —Ä–∏–∑–∏–∫—É–≤–∞—Ç–∏ –∑–∞–±–∞–≥–∞—Ç–æ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ üòâ"
        )
        return BET

    if bet > user["balance"]:
        await update.message.reply_text(
            f"‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î —Å—Ç—ñ–ª—å–∫–∏ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏.\n"
            f"–¢–≤—ñ–π –±–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Å—Ç–∞–≤–∫—É, —è–∫—É —Ç–∏ –º–æ–∂–µ—à –¥–æ–∑–≤–æ–ª–∏—Ç–∏ —Å–æ–±—ñ."
        )
        return BET

    await asyncio.sleep(1)

    gif_path = "coin-flip.gif"
    animation_msg = await update.message.reply_animation(animation=open(gif_path, "rb"))
    await asyncio.sleep(3)
    await animation_msg.delete()

    result = random.choice(["win", "lose"])

    bonus_chance = random.random()
    bonus_text = ""
    if result == "win" and bonus_chance < 0.05:
        winnings = bet * 3
        bonus_text = "\nüî• –ë–æ–Ω—É—Å! –í–∏–≥—Ä–∞—à –ø–æ—Ç—Ä—ñ–π–Ω–∏–π!"
    elif result == "win":
        winnings = bet
    else:
        winnings = -bet

    new_balance = user["balance"] + winnings
    new_games_played = user.get("games_played", 0) + 1
    new_total_winnings = user.get("total_winnings", 0) + (winnings if winnings > 0 else 0)

    if result == "win":
        new_win_streak = user.get("win_streak", 0) + 1
    else:
        new_win_streak = 0

    new_max_win_streak = max(user.get("max_win_streak", 0), new_win_streak)

    new_level = calculate_level(new_games_played)

    achievements = user.get("achievements", [])

    def add_achievement(name):
        if name not in achievements:
            achievements.append(name)

    if new_win_streak >= 10:
        add_achievement("üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å 10 —ñ–≥–æ—Ä –ø–æ—Å–ø—ñ–ª—å!")
    if new_total_winnings >= 1000:
        add_achievement("üí∞ –í–∏–≥—Ä–∞–≤ 1000 –º–æ–Ω–µ—Ç!")
    if new_games_played >= 50:
        add_achievement("üéÆ –ó—ñ–≥—Ä–∞–≤ 50 —ñ–≥–æ—Ä!")

    update_fields = {
        "balance": new_balance,
        "wins": user.get("wins", 0) + (1 if result == "win" else 0),
        "losses": user.get("losses", 0) + (1 if result == "lose" else 0),
        "games_played": new_games_played,
        "win_streak": new_win_streak,
        "max_win_streak": new_max_win_streak,
        "total_winnings": new_total_winnings,
        "level": new_level,
        "achievements": achievements
    }

    users.update_one({"user_id": user_id}, {"$set": update_fields})

    msg = (
        f"{'üéâ –£—Ä–∞! –¢–∏ –≤–∏–≥—Ä–∞–≤ —Å—Ç–∞–≤–∫—É' if result == 'win' else 'üíÄ –ù–∞ –∂–∞–ª—å, —Ç–∏ –ø—Ä–æ–≥—Ä–∞–≤ —Å—Ç–∞–≤–∫—É'} {abs(winnings)} –º–æ–Ω–µ—Ç!"
        f"{bonus_text}\n\n"
        f"üí∞ –¢–µ–ø–µ—Ä —Ç–≤—ñ–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {update_fields['wins']} –≤–∏–≥—Ä–∞—à—ñ–≤, {update_fields['losses']} –ø—Ä–æ–≥—Ä–∞—à—ñ–≤\n"
        f"üé≤ –Ü–≥–æ—Ä –∑—ñ–≥—Ä–∞–Ω–æ: {new_games_played}\n"
        f"üî• –†–µ–∫–æ—Ä–¥–Ω–∞ —Å–µ—Ä—ñ—è –≤–∏–≥—Ä–∞—à—ñ–≤: {new_max_win_streak}\n"
        f"‚≠ê –†—ñ–≤–µ–Ω—å: {new_level}\n"
    )

    await update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)

    return ConversationHandler.END

SLOT_SYMBOLS = ["üçí", "üçã", "üçâ", "‚≠ê", "üîî", "üíé"]

async def safe_edit_message(message, text, delay=1.0):
    try:
        await message.edit_text(text)
        await asyncio.sleep(delay)
    except RetryAfter as e:
        print(f"[FLOOD] Telegram –ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–æ–∂–¥–∞—Ç–∏ {e.retry_after} —Å–µ–∫.")
        await asyncio.sleep(e.retry_after)
        try:
            await message.edit_text(text)
        except Exception as ex:
            print(f"[ERROR after retry] {ex}")
    except TelegramError as e:
        print(f"[TelegramError] {e}")
    except Exception as e:
        print(f"[Other Error] {e}")

def rocket_progress(progress_percent: int) -> str:
    total_steps = 10
    filled_steps = int((progress_percent / 100) * total_steps)
    if filled_steps > total_steps:
        filled_steps = total_steps
    rocket_bar = "üöÄ" + "=" * filled_steps + ">" + " " * (total_steps - filled_steps)
    return f"{rocket_bar} ({progress_percent}%)"

async def slots_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = users.find_one({"user_id": user_id})

    if user is None:
        await update.message.reply_text(
            "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /start."
        )
        return ConversationHandler.END

    text = update.message.text

    if not text.isdigit():
        keyboard = [
            [InlineKeyboardButton("ü§ù –ó—ñ–≥—Ä–∞—Ç–∏ –∑ –∫–∏–º–æ—Å—å", callback_data="multiplayer_slot")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"üé© –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–ª–æ—Ç-–∑–∞–ª–∏!\n\n"
            f"üíº –í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç.\n"
            "üí° –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Å—Ç–∞–≤–∫–∏ (—Ü—ñ–ª–µ —á–∏—Å–ª–æ).\n\n"
            "üé∞ –°–∏–º–≤–æ–ª–∏ –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö:\n"
            "üçí –í–∏—à–Ω—ñ ‚Äî –∫–ª–∞—Å–∏–∫–∞\n"
            "üçã –õ–∏–º–æ–Ω–∏ ‚Äî –∫–∏—Å–ª–æ, –∞–ª–µ –≤–∏–≥—ñ–¥–Ω–æ\n"
            "üçâ –ö–∞–≤—É–Ω–∏ ‚Äî —à–∞–Ω—Å –Ω–∞ –≤–µ–ª–∏–∫–∏–π –≤–∏–≥—Ä–∞—à\n"
            "‚≠ê –ó—ñ—Ä–∫–∏ ‚Äî —Å–∏–º–≤–æ–ª —É–¥–∞—á—ñ\n"
            "üîî –î–∑–≤–æ–Ω–∏ ‚Äî —á–∞—Å –≤–∏–≥—Ä–∞—à—ñ–≤\n"
            "üíé –î—ñ–∞–º–∞–Ω—Ç–∏ ‚Äî —à–ª—è—Ö –¥–æ –¥–∂–µ–∫–ø–æ—Ç—É!\n\n"
            "üéØ –í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞–≤–∫—É —ñ –æ–±–µ—Ä—Ç–∞–π—Ç–µ –±–∞—Ä–∞–±–∞–Ω–∏.\n"
            "‚èπ –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≥—Ä—É, –≤–≤–µ–¥—ñ—Ç—å /cancel.",
            reply_markup=reply_markup
        )
        return SLOTS_BET

    bet = int(text)

    if bet < 10:
        await update.message.reply_text("‚ùå –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞ ‚Äî 10 –º–æ–Ω–µ—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return SLOTS_BET
    if bet > user["balance"]:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–º–µ–Ω—à—ñ—Ç—å —Å—Ç–∞–≤–∫—É.")
        return SLOTS_BET

    message = await update.message.reply_text("üé∞ –û–±–µ—Ä—Ç–∞—î–º–æ –±–∞—Ä–∞–±–∞–Ω–∏...")

    spins = 5
    for i in range(spins):
        current_spin = [random.choice(SLOT_SYMBOLS) for _ in range(3)]
        display = " | ".join(current_spin)
        progress = int((i + 1) / spins * 100)
        rocket_bar = rocket_progress(progress)

        await safe_edit_message(
            message,
            f"üé∞ –û–±–µ—Ä—Ç–∞—î–º–æ –±–∞—Ä–∞–±–∞–Ω–∏...\n\n"
            f"{display}\n\n"
            f"{rocket_bar}\n"
            f"üí® –ö—Ä—É—Ç–∏–ª–∫–∞ –≤ –¥—ñ—ó!"
        )

    if len(set(current_spin)) == 1:
        winnings = bet * 5
        win = 1
        lose = 0
        result_icon = "üéâüéâüéâ"
        result_text = f"–í–∞—É! –¢—Ä–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏ ‚Äî –î–∂–µ–∫–ø–æ—Ç! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ {winnings} –º–æ–Ω–µ—Ç!"
    elif len(set(current_spin)) == 2:
        winnings = bet * 2
        win = 1
        lose = 0
        result_icon = "‚ú®"
        result_text = f"–ß—É–¥–æ–≤–æ! –î–≤–∞ –æ–¥–Ω–∞–∫–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª–∏. –í–∏ –≤–∏–≥—Ä–∞–ª–∏ {winnings} –º–æ–Ω–µ—Ç!"
    else:
        winnings = -bet
        win = 0
        lose = 1
        result_icon = "üíî"
        result_text = f"–ù–∞ –∂–∞–ª—å, –≤–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏ {bet} –º–æ–Ω–µ—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!"

    new_balance = user["balance"] + winnings
    new_games_played = user.get("games_played", 0) + 1
    new_level = calculate_level(new_games_played)

    users.update_one(
        {"user_id": user_id},
        {"$set": {
            "balance": new_balance,
            "games_played": new_games_played,
            "wins": user.get("wins", 0) + win,
            "losses": user.get("losses", 0) + lose,
            "level": new_level
        }}
    )

    final_msg = (
        f"{result_icon} {result_text} {result_icon}\n\n"
        f"üí∞ –í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: *{new_balance}* –º–æ–Ω–µ—Ç\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: *{user.get('wins', 0) + win}* –≤–∏–≥—Ä–∞—à—ñ–≤, *{user.get('losses', 0) + lose}* –ø—Ä–æ–≥—Ä–∞—à—ñ–≤\n"
        f"üé≤ –Ü–≥–æ—Ä –∑—ñ–≥—Ä–∞–Ω–æ: *{new_games_played}*\n"
        f"‚≠ê –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: *{new_level}*"
    )

    await safe_edit_message(message, final_msg, delay=0.1)

    return ConversationHandler.END

async def daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = users.find_one({"user_id": user_id})

    if not user:
        await update.message.reply_text("‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞–ø–∏—à—ñ—Ç—å /start")
        return

    now = datetime.utcnow()
    last = user.get("last_daily")

    if last and now - last < timedelta(hours=24):
        hours_left = 24 - (now - last).seconds // 3600
        await update.message.reply_text(f"‚è≥ –©–µ —Ä–∞–Ω–æ! –°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {hours_left} –≥–æ–¥.")
    else:
        users.update_one(
            {"user_id": user_id},
            {"$set": {"balance": user["balance"] + 50, "last_daily": now}}
        )
        await update.message.reply_text("üéÅ –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å 50 –º–æ–Ω–µ—Ç!")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõë –ì—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ù–µ —Å—É–º—É–π ‚Äî –∑–∞–≤–∂–¥–∏ –º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑! üé≤"
    )
    return ConversationHandler.END

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = users.find_one({"user_id": user_id})
    if not user:
        await update.message.reply_text("‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞–ø–∏—à—ñ—Ç—å /start")
        return

    backgrounds = [
        "1.jpg",
        "2.jpg",
        "3.jpg",
        "4.jpg",
        "illustration-anime-city.jpg"
    ]

    background_path = random.choice(backgrounds)
    background = Image.open(background_path).convert("RGBA")

    draw = ImageDraw.Draw(background)

    font_path = "Pollock1CTT Regular.ttf"
    try:
        font_big = ImageFont.truetype(font_path, 32)
        font_small = ImageFont.truetype(font_path, 20)
    except:
        font_big = ImageFont.load_default()
        font_small = ImageFont.load_default()

    purchased = user.get("purchased_features", [])

    vip_priority = [
        "legend", "grandmaster", "titan", "obsidian", "mythic", "emerald", "sapphire",
        "diamond", "champion", "master", "elite", "platinum", "royal", "premium_plus",
        "premium", "vip_plus", "vip", "gold", "silver", "bronze"
    ]

    user_privilege = None
    for key in vip_priority:
        if key in purchased:
            user_privilege = key
            break

    avatar_size = (128, 128)

    if user_privilege:
        avatar_path = f"{user_privilege}.png"
        if os.path.isfile(avatar_path):
            avatar = Image.open(avatar_path).convert("RGBA").resize(avatar_size)
        else:
            avatar = Image.new("RGBA", avatar_size, (100, 100, 100, 255))
    else:
        photos = await context.bot.get_user_profile_photos(user_id, limit=1)
        if photos.total_count > 0:
            file_id = photos.photos[0][-1].file_id
            file = await context.bot.get_file(file_id)
            avatar_bytes = BytesIO()
            await file.download_to_memory(out=avatar_bytes)
            avatar_bytes.seek(0)
            avatar = Image.open(avatar_bytes).convert("RGBA").resize(avatar_size)
        else:
            avatar = Image.new("RGBA", avatar_size, (100, 100, 100, 255))

    vip_border_colors = {
        "bronze": (205, 127, 50, 255),
        "silver": (192, 192, 192, 255),
        "gold": (255, 215, 0, 255),
        "vip": (255, 165, 0, 255),
        "vip_plus": (255, 140, 0, 255),
        "premium": (30, 144, 255, 255),
        "premium_plus": (220, 20, 60, 255),
        "royal": (128, 0, 128, 255),
        "platinum": (229, 228, 226, 255),
        "elite": (255, 105, 180, 255),
        "master": (0, 255, 127, 255),
        "champion": (255, 69, 0, 255),
        "diamond": (185, 242, 255, 255),
        "sapphire": (15, 82, 186, 255),
        "emerald": (80, 200, 120, 255),
        "mythic": (138, 43, 226, 255),
        "obsidian": (30, 30, 30, 255),
        "titan": (128, 128, 128, 255),
        "grandmaster": (255, 215, 0, 255),
        "legend": (255, 0, 0, 255)
    }

    border_color = None
    for key in vip_priority:
        if key in purchased:
            border_color = vip_border_colors.get(key, (180, 180, 255, 255))
            break
    if border_color is None:
        border_color = (180, 180, 255, 255)

    border_size = 4
    mask = Image.new("L", (avatar.size[0] + border_size*2, avatar.size[1] + border_size*2), 0)
    draw_mask = ImageDraw.Draw(mask)
    draw_mask.ellipse((0, 0, mask.size[0], mask.size[1]), fill=255)

    background.paste(border_color, (30 - border_size, 30 - border_size), mask)

    mask_avatar = Image.new("L", avatar.size, 0)
    draw_mask_avatar = ImageDraw.Draw(mask_avatar)
    draw_mask_avatar.ellipse((0, 0, avatar.size[0], avatar.size[1]), fill=255)
    avatar.putalpha(mask_avatar)

    background.paste(avatar, (30, 30), avatar)

    def draw_text_with_neon(draw_obj, position, text, font, base_color="white", neon_color=(100, 100, 255), neon_radius=2):
        x, y = position
        for dx in range(-neon_radius, neon_radius + 1):
            for dy in range(-neon_radius, neon_radius + 1):
                if dx == 0 and dy == 0:
                    continue
                draw_obj.text((x + dx, y + dy), text, font=font, fill=neon_color)
        draw_obj.text(position, text, font=font, fill=base_color)

    nickname = user.get('username', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
    if "star_emoji" in purchased:
        nickname += " ‚≠ê"

    draw_text_with_neon(draw, (180, 40), f"–ü—Ä–æ—Ñ—ñ–ª—å: @{nickname}", font_big)

    draw_text_with_neon(draw, (180, 90), f"–ë–∞–ª–∞–Ω—Å: {user.get('balance', 0)} –º–æ–Ω–µ—Ç", font_small)
    draw_text_with_neon(draw, (180, 120), f"–†—ñ–≤–µ–Ω—å: {user.get('level', 1)}", font_small)
    draw_text_with_neon(draw, (180, 150), f"–Ü–≥–æ—Ä –∑—ñ–≥—Ä–∞–Ω–æ: {user.get('games_played', 0)}", font_small)
    draw_text_with_neon(draw, (180, 180), f"–í–∏–≥—Ä–∞—à—ñ–≤: {user.get('wins', 0)}", font_small)
    draw_text_with_neon(draw, (180, 210), f"–ü—Ä–æ–≥—Ä–∞—à—ñ–≤: {user.get('losses', 0)}", font_small)
    draw_text_with_neon(draw, (180, 240), f"–ú–∞–∫—Å —Å–µ—Ä—ñ—è –≤–∏–≥—Ä–∞—à—ñ–≤: {user.get('max_win_streak', 0)}", font_small)

    current_level = user.get('level', 1)
    games_played = user.get('games_played', 0)

    def level_games_required(level):
        return [0, 10, 30, 60, 100, 150][level] if level < 6 else 150

    games_for_current_level = level_games_required(current_level)
    games_for_next_level = level_games_required(current_level + 1)

    progress = (games_played - games_for_current_level) / max(1, (games_for_next_level - games_for_current_level))
    progress = max(0.0, min(progress, 1.0))

    achievements = user.get("achievements", [])
    badges = {
        "üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å 10 —ñ–≥–æ—Ä –ø–æ—Å–ø—ñ–ª—å!": "ü•á",
        "üí∞ –í–∏–≥—Ä–∞–≤ 1000 –º–æ–Ω–µ—Ç!": "üíé",
        "üéÆ –ó—ñ–≥—Ä–∞–≤ 50 —ñ–≥–æ—Ä!": "üé≤"
    }
    ach_text = "–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è:\n"
    if achievements:
        for ach in achievements:
            badge = badges.get(ach, "‚úÖ")
            ach_text += f"{badge} {ach}\n"
    else:
        ach_text += "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ—Å—è–≥–Ω–µ–Ω—å."

    draw.multiline_text((30, 310), ach_text, font=font_small, fill="white")

    output = BytesIO()
    background.save(output, format="PNG")
    output.seek(0)
    await update.message.reply_photo(photo=output)

shop_items_vip = {
    "bronze": {"name": "Bronze", "price": 1000, "description": "–°—Ç–∞—Ç—É—Å Bronze ‚Äî –±—Ä–æ–Ω–∑–æ–≤–∏–π –∫–æ–ª—ñ—Ä –Ω—ñ–∫—É."},
    "silver": {"name": "Silver", "price": 2500, "description": "–°—Ç–∞—Ç—É—Å Silver ‚Äî —Å—Ä—ñ–±–Ω–∏–π –∫–æ–ª—ñ—Ä –Ω—ñ–∫—É."},
    "gold": {"name": "Gold", "price": 5000, "description": "–°—Ç–∞—Ç—É—Å Gold ‚Äî –∑–æ–ª–æ—Ç–∏–π –∫–æ–ª—ñ—Ä –Ω—ñ–∫—É."},
    "vip": {"name": "VIP", "price": 8000, "description": "–°—Ç–∞—Ç—É—Å VIP ‚Äî –∑–æ–ª–æ—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "vip_plus": {"name": "VIP+", "price": 12000, "description": "–°—Ç–∞—Ç—É—Å VIP+ ‚Äî —Ä–æ–∑—à–∏—Ä–µ–Ω–µ –∑–æ–ª–æ—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "premium": {"name": "Premium", "price": 18000, "description": "–°—Ç–∞—Ç—É—Å Premium ‚Äî —Å–∏–Ω—î –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "premium_plus": {"name": "Premium++", "price": 24000, "description": "–°—Ç–∞—Ç—É—Å Premium++ ‚Äî —á–µ—Ä–≤–æ–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "royal": {"name": "Royal", "price": 30000, "description": "–°—Ç–∞—Ç—É—Å Royal ‚Äî –∫–æ—Ä–æ–ª—ñ–≤—Å—å–∫–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "platinum": {"name": "Platinum", "price": 40000, "description": "–°—Ç–∞—Ç—É—Å Platinum ‚Äî –ø–ª–∞—Ç–∏–Ω–æ–≤–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "elite": {"name": "Elite", "price": 55000, "description": "–°—Ç–∞—Ç—É—Å Elite ‚Äî –µ–ª—ñ—Ç–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "master": {"name": "Master", "price": 70000, "description": "–°—Ç–∞—Ç—É—Å Master ‚Äî –º–∞–π—Å—Ç–µ—Ä—Å—å–∫–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "champion": {"name": "Champion", "price": 90000, "description": "–°—Ç–∞—Ç—É—Å Champion ‚Äî —Å—Ç–∞—Ç—É—Å —á–µ–º–ø—ñ–æ–Ω–∞."},
    "diamond": {"name": "Diamond", "price": 120000, "description": "–°—Ç–∞—Ç—É—Å Diamond ‚Äî –¥—ñ–∞–º–∞–Ω—Ç–æ–≤–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "sapphire": {"name": "Sapphire", "price": 150000, "description": "–°—Ç–∞—Ç—É—Å Sapphire ‚Äî —Å–∞–ø—Ñ—ñ—Ä–æ–≤–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "emerald": {"name": "Emerald", "price": 180000, "description": "–°—Ç–∞—Ç—É—Å Emerald ‚Äî —Å–º–∞—Ä–∞–≥–¥–æ–≤–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "mythic": {"name": "Mythic", "price": 220000, "description": "–°—Ç–∞—Ç—É—Å Mythic ‚Äî –º—ñ—Ñ—ñ—á–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "obsidian": {"name": "Obsidian", "price": 270000, "description": "–°—Ç–∞—Ç—É—Å Obsidian ‚Äî –æ–±—Å–∏–¥—ñ–∞–Ω–æ–≤–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "titan": {"name": "Titan", "price": 330000, "description": "–°—Ç–∞—Ç—É—Å Titan ‚Äî —Ç–∏—Ç–∞–Ω–æ–≤–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "grandmaster": {"name": "Grandmaster", "price": 400000, "description": "–°—Ç–∞—Ç—É—Å Grandmaster ‚Äî –≥—Ä–∞–Ω–¥–º–∞–π—Å—Ç–µ—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."},
    "legend": {"name": "Legend", "price": 500000, "description": "–°—Ç–∞—Ç—É—Å Legend ‚Äî –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω—ñ–∫—É."}
}


def escape_md_v2(text: str) -> str:
    escape_chars = r'_*\[\]()~>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = users.find_one({"user_id": user_id})

    if not user:
        text = (
            "‚ùå *–£–ø—Å\\!* –í–∏ –ø–æ–∫–∏ —â–æ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —É —Å–∏—Å—Ç–µ–º—ñ.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏."
        )
        await update.message.reply_text(
            escape_markdown(text, version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    keyboard = []
    for key, item in shop_items_vip.items():
        owned = key in user.get("purchased_features", [])
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–Ω–æ–ø–∫–µ
        name_escaped = escape_markdown(item['name'], version=2)
        if owned:
            text = f"{name_escaped} ‚úÖ"
            keyboard.append([InlineKeyboardButton(text, callback_data="owned")])
        else:
            price_escaped = escape_markdown(str(item['price']), version=2)
            text = f"{name_escaped} üí∞ {price_escaped} –º–æ–Ω–µ—Ç"
            keyboard.append([InlineKeyboardButton(text, callback_data=f"buy_{key}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    shop_header = (
        "üõí *–ú–∞–≥–∞–∑–∏–Ω ¬´–î—ñ–¥ –ü–∞–Ω–∞—Å¬ª ‚Äî –ü—Ä–∏–≤—ñ–ª–µ—ó*\n\n"
        "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É\\! –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –ø—Ä–∏–≤—ñ–ª–µ—ó, "
        "—è–∫—ñ –∑—Ä–æ–±–ª—è—Ç—å –≤–∞—à—É –≥—Ä—É —Ü—ñ–∫–∞–≤—ñ—à–æ—é —Ç–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ñ—à–æ—é\\.\n\n"
        "‚¨áÔ∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∑ –ø—Ä–∏–≤—ñ–ª–µ—î—é, —è–∫—É —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏\\.\n"
        "‚ùóÔ∏è –Ø–∫—â–æ –ø—Ä–∏–≤—ñ–ª–µ—è –≤–∂–µ –ø—Ä–∏–¥–±–∞–Ω–∞, –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—é\\."
    )

    await update.message.reply_text(
        escape_markdown(shop_header, version=2),
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2
    )

    footer = (
        "\n\nüí° *–ü–æ—Ä–∞–¥–∞:* –ü—Ä–∏–≤—ñ–ª–µ—ó –º–æ–∂–Ω–∞ –ø—Ä–∏–¥–±–∞—Ç–∏ –ª–∏—à–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ.\n\n"
        "–Ø–∫—â–æ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç, –ø–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏.\n\n"
        "–î—è–∫—É—î–º–æ, —â–æ –≤–∏ –∑ –Ω–∞–º–∏! üåü"
    )

    await update.message.reply_text(
        escape_markdown(footer, version=2),
        parse_mode=ParseMode.MARKDOWN_V2
    )


async def shop_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user = users.find_one({"user_id": user_id})

    await query.answer()

    data = query.data

    if data == "owned":
        text = "‚úÖ –í–∏ –≤–∂–µ –ø—Ä–∏–¥–±–∞–ª–∏ —Ü—é –ø—Ä–∏–≤—ñ–ª–µ—é."
        await query.edit_message_text(escape_markdown(text, version=2), parse_mode=ParseMode.MARKDOWN_V2)
        return

    if not data.startswith("buy_"):
        text = "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è."
        await query.edit_message_text(escape_markdown(text, version=2), parse_mode=ParseMode.MARKDOWN_V2)
        return

    item_key = data[4:]

    if item_key not in shop_items_vip:
        text = "‚ùå –¶—è –ø—Ä–∏–≤—ñ–ª–µ—è –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        await query.edit_message_text(escape_markdown(text, version=2), parse_mode=ParseMode.MARKDOWN_V2)
        return

    if item_key in user.get("purchased_features", []):
        text = "‚úÖ –í–∏ –≤–∂–µ –ø—Ä–∏–¥–±–∞–ª–∏ —Ü—é –ø—Ä–∏–≤—ñ–ª–µ—é."
        await query.edit_message_text(escape_markdown(text, version=2), parse_mode=ParseMode.MARKDOWN_V2)
        return

    price = shop_items_vip[item_key]["price"]

    if user["balance"] < price:
        text = (
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç.\n"
            f"–ë–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç, –ø–æ—Ç—Ä—ñ–±–Ω–æ: {price}."
        )
        await query.edit_message_text(escape_markdown(text, version=2), parse_mode=ParseMode.MARKDOWN_V2)
        return

    users.update_one(
        {"user_id": user_id},
        {
            "$inc": {"balance": -price},
            "$push": {"purchased_features": item_key}
        }
    )

    item_name = shop_items_vip[item_key]["name"]
    text = f"üéâ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–¥–±–∞–ª–∏ –ø—Ä–∏–≤—ñ–ª–µ—é *{escape_markdown(item_name, version=2)}*!"

    await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN_V2)


async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    top_users = list(users.find().sort("balance", -1).limit(10))

    if not top_users:
        await update.message.reply_text("‚ùå –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤.")
        return

    medals = ["ü•á", "ü•à", "ü•â"]
    msg = "üèÜ *–¢–æ–ø 10 –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º* üèÜ\n\n"
    for i, user in enumerate(top_users, start=1):
        username = user.get("username") or f"User{user['user_id']}"
        balance = user.get("balance", 0)
        medal = medals[i-1] if i <= 3 else f"{i}Ô∏è‚É£"
        msg += f"{medal} *{username}* ‚Äî üí∞ {balance} –º–æ–Ω–µ—Ç\n"

    msg += "\nüéâ –í—ñ—Ç–∞—î–º–æ –Ω–∞—à–∏—Ö —á–µ–º–ø—ñ–æ–Ω—ñ–≤ —Ç–∞ –±–∞–∂–∞—î–º–æ —É–¥–∞—á—ñ –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º! üçÄ"
    await update.message.reply_text(msg, parse_mode="Markdown")

async def bot_added_to_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        if member.id == context.bot.id:
            leave_time = datetime.utcnow() + timedelta(minutes=1)
            await update.message.reply_text(
                "ü§ñ –í—ñ—Ç–∞—é! –Ø ‚Äî —Ç–µ—Å—Ç–æ–≤–∞ –≤–µ—Ä—Å—ñ—è —Ü—å–æ–≥–æ Telegram-–±–æ—Ç–∞.\n\n"
                "‚ö†Ô∏è –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —â–æ —Ü—è –≤–µ—Ä—Å—ñ—è –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –ª–∏—à–µ —Ç–∏–º—á–∞—Å–æ–≤–æ.\n"
                "üí° –í–∞—à—ñ —ñ–¥–µ—ó, –ø–æ–±–∞–∂–∞–Ω–Ω—è —Ç–∞ –±—É–¥—å-—è–∫–∏–π —Ñ—ñ–¥–±–µ–∫ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤—ñ –¥–ª—è –Ω–∞—Å!\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —ó—Ö –∞–≤—Ç–æ—Ä—É –±–æ—Ç–∞: @An1h3lia\n\n"
                "üìå –ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—è –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤—ñ –≤–µ—Ä—Å—ñ—ó —ñ –∫–æ—Ä–∏—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.\n\n"
                "–©–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start.\n\n"
                "–î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É! ü§ù"
            )
            return

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    sender = users.find_one({"user_id": user_id})

    if not sender:
        await update.message.reply_text("‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /pay <username> <amount>\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /pay @didpanas 100")
        return

    target_username = context.args[0].lstrip("@")

    try:
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º.")
        return

    if amount <= 0:
        await update.message.reply_text("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è.")
        return

    if sender["balance"] < amount:
        await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É. –í–∞—à –±–∞–ª–∞–Ω—Å: {sender['balance']}")
        return

    recipient = users.find_one({
        "username": {"$regex": f"^{target_username}$", "$options": "i"}
    })

    if not recipient:
        await update.message.reply_text(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{target_username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    if recipient["user_id"] == user_id:
        await update.message.reply_text("‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–∞–∑—É–≤–∞—Ç–∏ –º–æ–Ω–µ—Ç–∏ —Å–æ–±—ñ.")
        return

    users.update_one({"user_id": user_id}, {"$inc": {"balance": -amount}})
    users.update_one({"user_id": recipient["user_id"]}, {"$inc": {"balance": amount}})

    await update.message.reply_text(
        f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∫–∞–∑–∞–ª–∏ {amount} –º–æ–Ω–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{recipient['username']}.\n"
        f"–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {sender['balance'] - amount} –º–æ–Ω–µ—Ç."
    )

    try:
        await context.bot.send_message(
            chat_id=recipient["user_id"],
            text=f"üéâ –í–∞–º –Ω–∞–¥—ñ–π—à–ª–æ {amount} –º–æ–Ω–µ—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{sender['username']}!"
        )
    except Exception:
        pass

async def give_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = 6244270354 
    if update.effective_user.id != admin_id:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    result = users.update_many({}, {"$inc": {"balance": 1000000}})
    await update.message.reply_text(f"‚úÖ –í—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –¥–æ–¥–∞–Ω–æ –ø–æ 1 000 000 –º–æ–Ω–µ—Ç. –û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {result.modified_count}")


async def give(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = 6244270354 
    if update.effective_user.id != admin_id:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = context.args
    if len(args) != 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /give <username> <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /give @username 1000"
        )
        return

    username = args[0].lstrip("@").lower()
    try:
        amount = int(args[1])
        if amount <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º —á–∏—Å–ª–æ–º.")
        return

    user_doc = users.find_one({"username": {"$regex": f"^{username}$", "$options": "i"}})
    if not user_doc:
        await update.message.reply_text(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ username @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ.")
        return

    target_user_id = user_doc["user_id"]

    result = users.update_one({"user_id": target_user_id}, {"$inc": {"balance": amount}})
    if result.modified_count == 0:
        await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username}.")
    else:
        await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{username} –¥–æ–¥–∞–Ω–æ {amount} –º–æ–Ω–µ—Ç.")


active_challenges = {}

def generate_math_problem():
    operations = ['+', '-', '*', '//']
    op = random.choice(operations)

    if op == '*':
        a = random.randint(10, 30)
        b = random.randint(5, 20)
        reward = 3000 + (a + b) * 20
    elif op == '//':
        b = random.randint(2, 15)
        answer = random.randint(2, 20)
        a = b * answer
        reward = 4000 + (a + b) * 30
        problem_text = (
            f"üî¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–∫–ª–∏–∫!\n"
            f"–û–±—á–∏—Å–ª–∏: {a} {op} {b} = ?\n"
            f"–ü–µ—Ä—à–∏–π, —Ö—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–∑–≤‚Äô—è–∂–µ ‚Äî –æ—Ç—Ä–∏–º–∞—î –Ω–∞–≥–æ—Ä–æ–¥—É —É {reward} –º–æ–Ω–µ—Ç! üéØüß†"
        )
        return problem_text, answer, reward
    else:
        a = random.randint(20, 80)
        b = random.randint(10, 50)
        reward = 2000 + (a + b) * 10

    if op == '+':
        answer = a + b
    elif op == '-':
        answer = a - b
    elif op == '*':
        answer = a * b

    problem_text = (
        f"üî¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–∫–ª–∏–∫!\n"
        f"–û–±—á–∏—Å–ª–∏: {a} {op} {b} = ?\n"
        f"–ü–µ—Ä—à–∏–π, —Ö—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–∑–≤‚Äô—è–∂–µ ‚Äî –æ—Ç—Ä–∏–º–∞—î –Ω–∞–≥–æ—Ä–æ–¥—É —É {reward} –º–æ–Ω–µ—Ç! üéØüß†"
    )
    return problem_text, answer, reward

async def send_math_challenge(context: ContextTypes.DEFAULT_TYPE):
    active_chats = context.bot_data.get("active_chats", set())
    for chat_id in active_chats:
        if chat_id in active_challenges and not active_challenges[chat_id]["answered"]:
            continue
        problem_text, answer, reward = generate_math_problem()
        try:
            msg = await context.bot.send_message(chat_id=chat_id, text=problem_text)
            active_challenges[chat_id] = {
                "answer": answer,
                "reward": reward,
                "answered": False,
                "message_id": msg.message_id
            }
        except Exception as e:
            print(f"–ù–µ –º–æ–∂—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç {chat_id}: {e}")

async def math_answer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if chat_id not in active_challenges or active_challenges[chat_id]["answered"]:
        return

    challenge = active_challenges[chat_id]

    if not text.isdigit():
        return

    if int(text) == challenge["answer"]:
        challenge["answered"] = True
        reward = challenge["reward"]

        user = users.find_one({"user_id": user_id})
        if user:
            new_balance = user.get("balance", 0) + reward
            users.update_one({"user_id": user_id}, {"$set": {"balance": new_balance}})

        await update.message.reply_text(
            f"üéâ –í—ñ—Ç–∞—î–º–æ, {update.effective_user.first_name}! üéì\n"
            f"–¢–≤–æ—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å ‚Äî —Ü–µ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ç—Ä–∏—É–º—Ñ —Ä–æ–∑—É–º—É! üß†üí•\n"
            f"–¢–∏ –æ—Ç—Ä–∏–º—É—î—à –∑–∞—Å–ª—É–∂–µ–Ω—ñ *{reward}* –º–æ–Ω–µ—Ç! –ì–æ—Ç—É–π—Å—è –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É! üöÄ",
            parse_mode='Markdown'
        )

        del active_challenges[chat_id]

async def start_math_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    active_chats = context.bot_data.get("active_chats", set())
    active_chats.add(chat_id)
    context.bot_data["active_chats"] = active_chats
    await update.message.reply_text(
        "‚úÖ –ß–∞—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤!\n"
        "–ü—Ä–∏–∫–ª–∞–¥–∏ –±—É–¥—É—Ç—å –∑‚Äô—è–≤–ª—è—Ç–∏—Å—è –∫–æ–∂–Ω—ñ 1 —Ö–≤–∏–ª–∏–Ω ‚Äî —Ç—Ä–µ–Ω—É–π —Å–≤—ñ–π –º–æ–∑–æ–∫ —Ç–∞ –∑–±–∏—Ä–∞–π –º–æ–Ω–µ—Ç–∏! üí°üí∞"
    )

async def stop_math_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    active_chats = context.bot_data.get("active_chats", set())
    active_chats.discard(chat_id)
    context.bot_data["active_chats"] = active_chats
    await update.message.reply_text(
        "üõë –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –≤–∏–∫–ª–∏–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ.\n"
        "–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å! –ü–æ–≤–µ—Ä–Ω–∏—Å—å –∑–∞ –Ω–æ–≤–∏–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –±—É–¥—å-–∫–æ–ª–∏! üìö‚ú®"
    )

async def periodic_task(application: Application):
    while True:
        await send_math_challenge(application)
        await asyncio.sleep(60)

async def periodic_task(context: ContextTypes.DEFAULT_TYPE):
    await send_math_challenge(context)

def main():
    bot_token = "8040782659:AAFgYkj067UhF8_eg13_m8UJCseE0Ur224w"
    app = ApplicationBuilder().token(bot_token).build()

    slots_conv = ConversationHandler(
        entry_points=[CommandHandler("slots", slots_bet)],
        states={SLOTS_BET: [MessageHandler(filters.TEXT & ~filters.COMMAND, slots_bet)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(slots_conv)

    coin_conv = ConversationHandler(
        entry_points=[CommandHandler("coin", coin_start)],
        states={BET: [MessageHandler(filters.TEXT & ~filters.COMMAND, coin_bet)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(coin_conv)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("daily", daily))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("top", top_command))
    app.add_handler(CommandHandler("shop", shop))
    app.add_handler(CommandHandler("pay", pay))
    app.add_handler(CommandHandler("give_all", give_all))
    app.add_handler(CommandHandler("give", give))
    app.add_handler(CommandHandler("start_math_challenge", start_math_challenge))
    app.add_handler(CommandHandler("stop_math_challenge", stop_math_challenge))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, math_answer_handler))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, bot_added_to_group))
    app.add_handler(CallbackQueryHandler(shop_button_handler))

    print("ü§ñ –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞...")
    try:
        app.run_polling()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
    else:
        print("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π!")

if __name__ == "__main__":
    main()